* PIC32 DMA Controller

The PIC32 DMA controller has 8 channels in total.
Each DMA channel is capable of
 - memory-to-device, device-to-memory and memory-to-memory transfer.
 - Automatic flow-control & abort based on peripheral interrupt sources.
 - One-Shot or Auto-Repeat Block Transfer.

Required properties:
- compatible: Should be "microchip,pic32-dma".
- reg: Should contain DMA registers location and length.
- interrupts: Should contain the DMA interrupts associated
		to the DMA channels in ascending order.
Example:

	dma: dma-controller@1f811000 {
		compatible = "microchip,pic32-dma";
		reg = <0x1f811000 0x2000>;
		interrupts = <DMA_CHANNEL_0 DEFAULT_INT_PRI
				IRQ_TYPE_EDGE_RISING>,
			<DMA_CHANNEL_1 DEFAULT_INT_PRI IRQ_TYPE_EDGE_RISING>,
			<DMA_CHANNEL_2 DEFAULT_INT_PRI IRQ_TYPE_EDGE_RISING>,
			<DMA_CHANNEL_3 DEFAULT_INT_PRI IRQ_TYPE_EDGE_RISING>,
			<DMA_CHANNEL_4 DEFAULT_INT_PRI IRQ_TYPE_EDGE_RISING>,
			<DMA_CHANNEL_5 DEFAULT_INT_PRI IRQ_TYPE_EDGE_RISING>,
			<DMA_CHANNEL_6 DEFAULT_INT_PRI IRQ_TYPE_EDGE_RISING>,
			<DMA_CHANNEL_7 DEFAULT_INT_PRI IRQ_TYPE_EDGE_RISING>;
		#dma-cells = <1>;
	};

DMA clients connected to the PIC32 DMA controller must use the format
described in the dma.txt file, using a two-cell specifier for each channel.

Each dma request consists of 2 cells:
 1. phandle pointing to the DMA controller
 2. DMA channel number.

Example:

	i2s1: i2s@1f821000 {
		compatible = "microchip,pic32-i2s";
		reg = <0x1f821000 0x200>;
		interrupts = <SPI1_RECEIVE_DONE DEFAULT_INT_PRI
				IRQ_TYPE_LEVEL_HIGH>,
			<SPI1_TRANSFER_DONE DEFAULT_INT_PRI
				IRQ_TYPE_LEVEL_HIGH>;
		dmas = <&dma DMA_CHANNEL_0>,
			<&dma DMA_CHANNEL_1>;
		dma-names = "rx", "tx";
		clocks = <&PBCLK2>, <&REFCLKO1>;
		clock-names = "mck0","mck1";
	};
